/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BinaryAuthorizationObservation struct {
}

type BinaryAuthorizationParameters struct {

	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	// +kubebuilder:validation:Optional
	BreakglassJustification *string `json:"breakglassJustification,omitempty" tf:"breakglass_justification,omitempty"`

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	// +kubebuilder:validation:Optional
	UseDefault *bool `json:"useDefault,omitempty" tf:"use_default,omitempty"`
}

type CloudSQLInstanceObservation struct {
}

type CloudSQLInstanceParameters struct {

	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	// +kubebuilder:validation:Optional
	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`
}

type ContainersEnvObservation struct {
}

type ContainersEnvParameters struct {

	// Volume's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The header field value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Source for the environment variable's value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ValueSource []ValueSourceParameters `json:"valueSource,omitempty" tf:"value_source,omitempty"`
}

type ContainersPortsObservation struct {
}

type ContainersPortsParameters struct {

	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersResourcesObservation struct {
}

type ContainersResourcesParameters struct {

	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +kubebuilder:validation:Optional
	Limits map[string]*string `json:"limits,omitempty" tf:"limits,omitempty"`
}

type ContainersVolumeMountsObservation struct {
}

type ContainersVolumeMountsParameters struct {

	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	// +kubebuilder:validation:Required
	MountPath *string `json:"mountPath" tf:"mount_path,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type HTTPGetHTTPHeadersObservation struct {
}

type HTTPGetHTTPHeadersParameters struct {

	// Volume's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The header field value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPGetObservation struct {
}

type HTTPGetParameters struct {

	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPHeaders []HTTPHeadersParameters `json:"httpHeaders,omitempty" tf:"http_headers,omitempty"`

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPHeadersObservation struct {
}

type HTTPHeadersParameters struct {

	// Volume's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The header field value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LatestCreatedExecutionObservation struct {

	// Completion timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CompletionTime *string `json:"completionTime,omitempty" tf:"completion_time,omitempty"`

	// Creation timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Name of the execution.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LatestCreatedExecutionParameters struct {
}

type LivenessProbeObservation struct {
}

type LivenessProbeParameters struct {

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	// +kubebuilder:validation:Optional
	FailureThreshold *float64 `json:"failureThreshold,omitempty" tf:"failure_threshold,omitempty"`

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPGet []HTTPGetParameters `json:"httpGet,omitempty" tf:"http_get,omitempty"`

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	// +kubebuilder:validation:Optional
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TCPSocket []TCPSocketParameters `json:"tcpSocket,omitempty" tf:"tcp_socket,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type SecretItemsObservation struct {
}

type SecretItemsParameters struct {

	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	// +kubebuilder:validation:Required
	Mode *float64 `json:"mode" tf:"mode,omitempty"`

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type StartupProbeHTTPGetObservation struct {
}

type StartupProbeHTTPGetParameters struct {

	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPHeaders []HTTPGetHTTPHeadersParameters `json:"httpHeaders,omitempty" tf:"http_headers,omitempty"`

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type StartupProbeObservation struct {
}

type StartupProbeParameters struct {

	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	// +kubebuilder:validation:Optional
	FailureThreshold *float64 `json:"failureThreshold,omitempty" tf:"failure_threshold,omitempty"`

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPGet []StartupProbeHTTPGetParameters `json:"httpGet,omitempty" tf:"http_get,omitempty"`

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	// +kubebuilder:validation:Optional
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TCPSocket []StartupProbeTCPSocketParameters `json:"tcpSocket,omitempty" tf:"tcp_socket,omitempty"`

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type StartupProbeTCPSocketObservation struct {
}

type StartupProbeTCPSocketParameters struct {

	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TCPSocketObservation struct {
}

type TCPSocketParameters struct {

	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TemplateContainersObservation struct {
}

type TemplateContainersParameters struct {

	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// List of environment variables to set in the container.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Env []ContainersEnvParameters `json:"env,omitempty" tf:"env,omitempty"`

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	LivenessProbe []LivenessProbeParameters `json:"livenessProbe,omitempty" tf:"liveness_probe,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Ports []ContainersPortsParameters `json:"ports,omitempty" tf:"ports,omitempty"`

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []ContainersResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StartupProbe []StartupProbeParameters `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VolumeMounts []ContainersVolumeMountsParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	// +kubebuilder:validation:Optional
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type TemplateTemplateObservation struct {
}

type TemplateTemplateParameters struct {

	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Containers []TemplateContainersParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// The execution environment being used to host this Task.
	// Possible values are EXECUTION_ENVIRONMENT_GEN1 and EXECUTION_ENVIRONMENT_GEN2.
	// +kubebuilder:validation:Optional
	ExecutionEnvironment *string `json:"executionEnvironment,omitempty" tf:"execution_environment,omitempty"`

	// Number of retries allowed per Task, before marking this Task failed.
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	// +kubebuilder:validation:Optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VPCAccess []VPCAccessParameters `json:"vpcAccess,omitempty" tf:"vpc_access,omitempty"`

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Volumes []TemplateVolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type TemplateVolumesObservation struct {
}

type TemplateVolumesParameters struct {

	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CloudSQLInstance []CloudSQLInstanceParameters `json:"cloudSqlInstance,omitempty" tf:"cloud_sql_instance,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Secret []VolumesSecretParameters `json:"secret,omitempty" tf:"secret,omitempty"`
}

type TerminalConditionObservation struct {

	// A reason for the execution condition.
	ExecutionReason *string `json:"executionReason,omitempty" tf:"execution_reason,omitempty"`

	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" tf:"last_transition_time,omitempty"`

	// Human readable message indicating details about the current status.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// A common (service-level) reason for this condition.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// A reason for the revision condition.
	RevisionReason *string `json:"revisionReason,omitempty" tf:"revision_reason,omitempty"`

	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// State of the condition.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TerminalConditionParameters struct {
}

type V2JobConditionsObservation struct {

	// A reason for the execution condition.
	ExecutionReason *string `json:"executionReason,omitempty" tf:"execution_reason,omitempty"`

	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" tf:"last_transition_time,omitempty"`

	// Human readable message indicating details about the current status.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// A common (service-level) reason for this condition.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// A reason for the revision condition.
	RevisionReason *string `json:"revisionReason,omitempty" tf:"revision_reason,omitempty"`

	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// State of the condition.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type V2JobConditionsParameters struct {
}

type V2JobObservation struct {

	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions []V2JobConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Number of executions created for this job.
	ExecutionCount *float64 `json:"executionCount,omitempty" tf:"execution_count,omitempty"`

	// A number that monotonically increases every time the user modifies the desired state.
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/jobs/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the last created execution.
	// Structure is documented below.
	LatestCreatedExecution []LatestCreatedExecutionObservation `json:"latestCreatedExecution,omitempty" tf:"latest_created_execution,omitempty"`

	// The generation of this Job. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	ObservedGeneration *string `json:"observedGeneration,omitempty" tf:"observed_generation,omitempty"`

	// Returns true if the Job is currently being acted upon by the system to bring it into the desired state.
	// When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and latestCreatedExecution.
	// If reconciliation failed, observedGeneration and latest_succeeded_execution will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in terminalCondition and conditions
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	// The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state
	// Structure is documented below.
	TerminalCondition []TerminalConditionObservation `json:"terminalCondition,omitempty" tf:"terminal_condition,omitempty"`

	// Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type V2JobParameters struct {

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BinaryAuthorization []BinaryAuthorizationParameters `json:"binaryAuthorization,omitempty" tf:"binary_authorization,omitempty"`

	// Arbitrary identifier for the API client.
	// +kubebuilder:validation:Optional
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// Arbitrary version identifier for the API client.
	// +kubebuilder:validation:Optional
	ClientVersion *string `json:"clientVersion,omitempty" tf:"client_version,omitempty"`

	// KRM-style labels for the resource. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, and DEPRECATED.
	// +kubebuilder:validation:Optional
	LaunchStage *string `json:"launchStage,omitempty" tf:"launch_stage,omitempty"`

	// The location of the cloud run job
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The template used to create executions for this Job.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Template []V2JobTemplateParameters `json:"template" tf:"template,omitempty"`
}

type V2JobTemplateObservation struct {
}

type V2JobTemplateParameters struct {

	// KRM-style labels for the resource.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +kubebuilder:validation:Optional
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Template []TemplateTemplateParameters `json:"template" tf:"template,omitempty"`
}

type VPCAccessObservation struct {
}

type VPCAccessParameters struct {

	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	// +kubebuilder:validation:Optional
	Connector *string `json:"connector,omitempty" tf:"connector,omitempty"`

	// Traffic VPC egress settings.
	// Possible values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY.
	// +kubebuilder:validation:Optional
	Egress *string `json:"egress,omitempty" tf:"egress,omitempty"`
}

type ValueSourceObservation struct {
}

type ValueSourceParameters struct {

	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SecretKeyRef []ValueSourceSecretKeyRefParameters `json:"secretKeyRef,omitempty" tf:"secret_key_ref,omitempty"`
}

type ValueSourceSecretKeyRefObservation struct {
}

type ValueSourceSecretKeyRefParameters struct {

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type VolumesSecretObservation struct {
}

type VolumesSecretParameters struct {

	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	// +kubebuilder:validation:Optional
	DefaultMode *float64 `json:"defaultMode,omitempty" tf:"default_mode,omitempty"`

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Items []SecretItemsParameters `json:"items,omitempty" tf:"items,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`
}

// V2JobSpec defines the desired state of V2Job
type V2JobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     V2JobParameters `json:"forProvider"`
}

// V2JobStatus defines the observed state of V2Job.
type V2JobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        V2JobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// V2Job is the Schema for the V2Jobs API. A Cloud Run Job resource that references a container image which is run to completion.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type V2Job struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              V2JobSpec   `json:"spec"`
	Status            V2JobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// V2JobList contains a list of V2Jobs
type V2JobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []V2Job `json:"items"`
}

// Repository type metadata.
var (
	V2Job_Kind             = "V2Job"
	V2Job_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: V2Job_Kind}.String()
	V2Job_KindAPIVersion   = V2Job_Kind + "." + CRDGroupVersion.String()
	V2Job_GroupVersionKind = CRDGroupVersion.WithKind(V2Job_Kind)
)

func init() {
	SchemeBuilder.Register(&V2Job{}, &V2JobList{})
}
