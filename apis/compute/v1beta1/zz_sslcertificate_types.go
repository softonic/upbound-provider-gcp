/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SSLCertificateObservation struct {

	// The unique identifier for the resource.
	CertificateID *float64 `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// Expire time of the certificate in RFC3339 text format.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// an identifier for the resource with format projects/{{project}}/global/sslCertificates/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URI of the created resource.
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type SSLCertificateParameters struct {

	// The certificate in PEM format.
	// The certificate chain must be no greater than 5 certs long.
	// The chain must include at least one intermediate cert.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Required
	CertificateSecretRef v1.SecretKeySelector `json:"certificateSecretRef" tf:"-"`

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The write-only private key in PEM format.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Required
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// SSLCertificateSpec defines the desired state of SSLCertificate
type SSLCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SSLCertificateParameters `json:"forProvider"`
}

// SSLCertificateStatus defines the observed state of SSLCertificate.
type SSLCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SSLCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SSLCertificate is the Schema for the SSLCertificates API. An SslCertificate resource, used for HTTPS load balancing.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type SSLCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SSLCertificateSpec   `json:"spec"`
	Status            SSLCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SSLCertificateList contains a list of SSLCertificates
type SSLCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SSLCertificate `json:"items"`
}

// Repository type metadata.
var (
	SSLCertificate_Kind             = "SSLCertificate"
	SSLCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SSLCertificate_Kind}.String()
	SSLCertificate_KindAPIVersion   = SSLCertificate_Kind + "." + CRDGroupVersion.String()
	SSLCertificate_GroupVersionKind = CRDGroupVersion.WithKind(SSLCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&SSLCertificate{}, &SSLCertificateList{})
}
