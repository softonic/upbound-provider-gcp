/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyRingImportJobAttestationObservation struct {

	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The format of the attestation data.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`
}

type KeyRingImportJobAttestationParameters struct {
}

type KeyRingImportJobObservation struct {

	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time.
	// Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
	// Only present if the chosen ImportMethod is one with a protection level of HSM.
	// Structure is documented below.
	Attestation []KeyRingImportJobAttestationObservation `json:"attestation,omitempty" tf:"attestation,omitempty"`

	// The time at which this resource is scheduled for expiration and can no longer be used.
	// This is in RFC3339 text format.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// an identifier for the resource with format {{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The resource name for this ImportJob in the format projects//locations//keyRings//importJobs/.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
	// Structure is documented below.
	PublicKey []PublicKeyObservation `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// The current state of the ImportJob, indicating if it can be used.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type KeyRingImportJobParameters struct {

	// The wrapping method to be used for incoming key material.
	// Possible values are RSA_OAEP_3072_SHA1_AES_256 and RSA_OAEP_4096_SHA1_AES_256.
	// +kubebuilder:validation:Required
	ImportMethod *string `json:"importMethod" tf:"import_method,omitempty"`

	// The KeyRing that this import job belongs to.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
	// +crossplane:generate:reference:type=KeyRing
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyRing *string `json:"keyRing,omitempty" tf:"key_ring,omitempty"`

	// Reference to a KeyRing to populate keyRing.
	// +kubebuilder:validation:Optional
	KeyRingRef *v1.Reference `json:"keyRingRef,omitempty" tf:"-"`

	// Selector for a KeyRing to populate keyRing.
	// +kubebuilder:validation:Optional
	KeyRingSelector *v1.Selector `json:"keyRingSelector,omitempty" tf:"-"`

	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	// Possible values are SOFTWARE, HSM, and EXTERNAL.
	// +kubebuilder:validation:Required
	ProtectionLevel *string `json:"protectionLevel" tf:"protection_level,omitempty"`
}

type PublicKeyObservation struct {

	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`
}

type PublicKeyParameters struct {
}

// KeyRingImportJobSpec defines the desired state of KeyRingImportJob
type KeyRingImportJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyRingImportJobParameters `json:"forProvider"`
}

// KeyRingImportJobStatus defines the observed state of KeyRingImportJob.
type KeyRingImportJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyRingImportJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyRingImportJob is the Schema for the KeyRingImportJobs API. A
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type KeyRingImportJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyRingImportJobSpec   `json:"spec"`
	Status            KeyRingImportJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyRingImportJobList contains a list of KeyRingImportJobs
type KeyRingImportJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyRingImportJob `json:"items"`
}

// Repository type metadata.
var (
	KeyRingImportJob_Kind             = "KeyRingImportJob"
	KeyRingImportJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyRingImportJob_Kind}.String()
	KeyRingImportJob_KindAPIVersion   = KeyRingImportJob_Kind + "." + CRDGroupVersion.String()
	KeyRingImportJob_GroupVersionKind = CRDGroupVersion.WithKind(KeyRingImportJob_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyRingImportJob{}, &KeyRingImportJobList{})
}
